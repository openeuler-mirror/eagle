# eagle default policy

[policy]
name=default
desc=optimaze for high energy efficiency

[sched_service]
enable=1
sched_lib = libsched_service.so

watt_sched_enable = 1
# [0, 100]. 0: keep the default value
watt_threshold = 0
# [0, 3600000].ms 0: keep the default value
watt_interval_ms = 0
# [0, 2^n-1], n is the number of NUMA nodes of the current device
# 0: keep the default value
watt_domain_mask = 0
# all: all tasks in user space will be added to the watt schedule list.
# or put the key words of the tasks name, separeted by ','. e.g.: nginx, mysql
watt_procs = all

# To enable smart grid, the watt_sched must be enabled first.
smart_grid_enable = 1
# all: all tasks in user space will be added to the watt schedule list.
# or put the key words of the tasks name, separeted by '|'. e.g.: nginx, mysql
# All vip tasks will be added to watt_procs list.
smart_grid_vip_procs = nginx|mysql
# If the smart_grid governor enabled, system will use smart_grid as the cpufreq governor,
# regardless the value of cpufreq_gov in section freq_service.
smart_grid_gov_eable = 0
smart_grid_vip_gov = performance
smart_grid_lev1_gov = conservative

[freq_service]
enable=1
freq_lib = libfreq_service.so
# options: performance powersave userspace conservative ondemand schedutil seep
cpufreq_gov = conservative
# sampling_rate_us [0,10000000], us.
# 0: indicates that the default sampling_rate_us of cpufreq_gov is retained.
sampling_rate_us = 0
# perf_loss_rate [-1,100], Effective when cpufreq_gov=seep only.
# -1: indicates that keeping the governor's default value
perf_loss_rate = 5

[idle_service]
enable=0
idle_lib = libidle_service.so
cpuidle_gov = menu

[pcap_service]
enable=0
pcap_lib = libpcap_service.so
enable_pcap = 1
cap_target = 500

[mpc_service]
enable=0
mpc_lib = libmpc_service.so
enable_mpc = 1
